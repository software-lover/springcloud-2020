# bootstrap.yml是系统级别的，优先级更高，会优先加载，去跟config-server进行交互
# application.yml是用户级的资源配置项，这个配置文件是client端服务自身的配置文件

server:
  port: 3355


spring:
  application:
    name: config-client
  cloud:
    # config客户端配置
    config:
      label: master   #分支名称
      name: config    #配置文件名称
      profile: dev #读取后缀名称，上述3个综合，master分支上config-dev.yml的配置文件被读取 http://config-3344.com:3344/master/config-dev.yml
      uri: http://localhost:3344  # 配置中心地址


#rabbitmq相关配置，15672是web管理界面的端口，5672是MQ访问的端口
rabbitmq:
  host: localhost
  port: 5672
  username: guest
  password: guest


#暴露监控端点(假如运维人员在GitHub上面改了配置，那么3344配置中心是可以及时读取最新内容的，但是客户端3355是从3344配置中心读取的，所有3355不会及时刷新，
#为了解决这个问题，1、这里加上监控端点配置，2、在Controller里面加上@RefreshScope注解，3、需要post请求刷新3355，curl -X POST "http://localhost:3355/actuator/refresh"   这样每台客户端都需要POST去操作，不显示，所以引入BUS消息总线)
management:
  endpoints:
    web:
      exposure:
        include: "*"  # 'refresh'


# 整合eureka
eureka:
  client: #客户端注册进eureka服务列表内
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/
    register-with-eureka: true #表示是否将自己注册进EurekaServer，默认为true
    fetch-registry: true #是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡
  # 提供者实例信息配置，完善actuator监控信息
  instance:
    instance-id: cloud-config-client3355
    prefer-ip-address: true     #注册的服务实例访问路径可以显示IP地址


# 整合actuator监控信息
info:
  app.name: wzm-cloud
  company.name: www.wzm.com
  build.artifactId: cloud-config-client-3355
  build.version: 1.0-SNAPSHOT
